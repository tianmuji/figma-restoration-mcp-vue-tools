---
alwaysApply: true
---

# 🔄 Figma组件还原流程规则

## 📋 工作目录范围
你始终在 figma-restoration-mcp-vue-tools目录下的文件工作

## 🎯 核心优势与定位

**⭐ 你是Claude AI，具备强大的图像元素识别能力**。在Figma组件还原流程中，**专注利用你的视觉识别能力**来：
- **直接识别expected.png中的视觉元素**: 无需依赖文件读取，直接观察和识别图片中的所有可见元素
- **智能过滤冗余元素**: 基于视觉验证，准确判断原始Figma JSON中的哪些元素在图片中真正可见、哪些是冗余的
- **确定真实元素层级**: 通过观察图片中的视觉层级关系，优化JSON中可能不合理的嵌套结构
- **视觉元素精确映射**: 将JSON中的技术描述与图片中的实际视觉效果进行准确对应

**重要说明**: 
- **图片对比工作由专门的对比工具完成**，Claude专注于元素识别和结构优化
- **原始Figma JSON只能保证视觉呈现正确**，但无法保证元素层级合理性和去除冗余元素
- **Claude的价值在于基于视觉真实性优化JSON结构**，确保最终实现更精确、更简洁

## 🔄 标准流程步骤

### 步骤1: 获取Figma数据
- **使用工具**: `mcp_figma-context_get_figma_data`
- 参数设置：
  - `fileKey`: 从Figma链接中提取
  - `nodeId`: 从Figma链接中提取
  - **⭐ savePath**: **必须使用绝对路径** `/Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools/src/figma-data`
- **文件命名规范**: 工具会自动保存JSON到指定目录，文件名包含node-id便于快速查找
  - 格式：`figma-{fileKey}-{nodeId}-{timestamp}.json`

### 步骤2: 下载预期截图获取视觉目标
**⭐ 首先获取视觉标准** - 在分析JSON之前先获取实际视觉效果：
- **使用工具**: `mcp_figma-context_download_figma_images`
- 参数设置：
  - `fileKey`: 与步骤1相同的fileKey
  - `nodeId`: 与步骤1相同的nodeId  
  - `localPath`: **必须使用绝对路径到results目录** `/Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools/src/components/{ComponentName}/results`
  - `fileName`: **必须命名为 "expected.png"**
  - `pngScale`: 3 （高分辨率）

**⭐ 重要：3倍图理解与尺寸设置**
- **图片缩放关系**: expected.png和actual.png都是3倍分辨率图片
- **CSS尺寸计算**: 实际CSS尺寸 = 图片显示尺寸 ÷ 3
- **尺寸来源优先级**:
  1. **layout-analysis.json** (1倍设计尺寸) - 主要依据 ✅
  2. **Figma JSON boundingBox** (1倍设计尺寸) - 验证依据
  3. **图片观察** (视觉识别) - 辅助判断，不用于数值设置

### 步骤3: 视觉驱动分析layout-analysis
**⭐ 视觉驱动的智能分析** - 结合视觉目标和技术数据进行分析：

**第一步：视觉元素识别**
- **直接查看expected.png**: 利用Claude的图像识别能力，直接分析图片中的所有可见元素
- **精确元素识别**: 识别图片中实际存在的文本、图标、按钮、背景、颜色、阴影等具体视觉元素
- **布局关系分析**: 观察元素间的相对位置、对齐方式、间距关系和层级结构
- **样式效果记录**: 记录实际的颜色值、字体样式、边框效果、阴影参数等视觉属性

**第二步：JSON数据映射**
- 从`/src/figma-data`目录读取原始figma JSON数据（按node-id快速定位最新的文件）
- 分析原始figma.json数据，确认以下关键信息：
  1. **页面结构**: 
     - 组件层级关系
     - 布局方式（**优先使用flex布局，非必要不使用绝对定位**）
     - 尺寸和位置信息
  2. **智能素材节点识别**:
     - **根据节点名字识别**: 检测名字中含有 `ic`、`ic_`、`素材`、`material`、`asset`、`icon`、`img`、`image` 等关键词
     - **自动跳过子节点**: 当识别为素材节点时，直接导出该节点，不再分析其子节点
     - **图片节点**: imageRef填充的节点
     - **图标节点**: SVG矢量图标
     - **背景图片**: 背景填充图片
     - **优先级**: 名字识别 > 类型+填充识别
  3. **子组件识别**: 嵌套的组件实例，可复用的UI元素
  4. **样式信息**: 颜色、字体、边框、阴影、圆角等效果

**第三步：冗余元素过滤与结构优化**
- **基于视觉真实性的结构优化**:
  - **视觉元素清单**: 利用Claude的图像识别能力，列出expected.png中所有真正可见的视觉元素
  - **JSON元素映射**: 将原始Figma JSON中的每个技术元素与视觉清单进行映射验证
  - **冗余元素智能识别**：
    - **不可见元素过滤**: 识别JSON中opacity为0、尺寸为0、或在视觉上完全不可见的元素
    - **重复元素合并**: 发现JSON中描述相同视觉效果的多个技术元素
    - **辅助性元素清理**: 移除在expected.png中无视觉体现的技术性辅助元素
  - **视觉层级结构分析**: 观察图片中元素的实际层级关系
  - **节点结构合理化**: 基于视觉层级优化JSON的嵌套结构

**第四步：布局结构优化**
- 将Figma的绝对定位转换为现代flex布局
- 分析元素间的相对位置关系
- 确定合理的padding和gap值
- 不使用margin

**输出：生成layout-analysis.json**
- 包含经过**视觉验证**的元素列表（已移除冗余元素）
- 明确的CSS布局策略（flex优先）
- 精确的尺寸和间距规范
- 符合Web标准的实现方案

### 步骤4: 下载素材
- **素材识别策略**:
  - **视觉驱动判断**: 基于Claude分析expected.png，确定真正需要的视觉素材
  - **节点名字判断规则**:
    - **语义化名称** (`"单选"`、`"按钮"`、`"图标组"`) → 通常是容器，需检查子元素
    - **具体形状名称** (`"Rectangle 3464324"`、`"Vector 297"`) → 真正的素材，优先下载
  - **节点类型优先级**:
    - **RECTANGLE/VECTOR/PATH** → 具体绘制元素，优先下载
    - **INSTANCE/COMPONENT** → 容器组件，需检查内部具体元素
    - **GROUP/FRAME** → 布局容器，通常不是素材本身
  - **尺寸精确匹配原则**:
    - **SVG原始尺寸 = CSS设置尺寸**，避免任何缩放变换
    - 确保viewBox与实际使用尺寸一致

### 步骤5: 递归还原子组件
对于识别出的子组件：
- 每个子组件重新执行步骤1-8的完整流程
- 创建独立的组件目录结构
- 确保组件间的依赖关系正确
- 优先还原基础组件，再还原复合组件

### 步骤6: 生成Vue组件代码
基于优化的JSON、准备的素材和制作的子组件生成代码：
- **技术栈要求**:
  - Vue 3 Composition API
  - TypeScript支持
  - **优先使用flex布局，避免绝对定位**
- **边框处理策略**:
  - **分析Figma边框类型**: 检查是内边框、外边框还是中边框
  - **选择合适的Web属性**:
    - 装饰性边框 → 使用 `outline` 或 `box-shadow`
    - 影响布局的边框 → 使用 `border` 并调整总尺寸
    - 复杂边框效果 → 使用 `box-shadow` 模拟多层边框
- **文件生成**:
  - `index.vue`: 主组件文件
  - `metadata.json`: 组件元数据（尺寸、描述等）

### 步骤7: 组件截图
使用工具进行高质量组件截图：
- **使用工具**: `mcp_figma_restoration_mcp_vue_tools_snapdom_screenshot`
- **基本参数**:
  - `componentName`: 组件名称
  - `projectPath`: 项目根路径
  - `port`: **⭐ 用户会启动服务在1932端口** (默认使用1932)
- **⭐ 必须指定输出路径**:
  - **outputPath**: **必须使用绝对路径到组件的results目录下的actual.png**
- **截图配置**:
  - `snapDOMOptions`: 高质量截图配置
    - `scale`: 3（高分辨率）
    - **padding设置规则**: **无阴影组件**: `padding: 0` （精确裁切，提升还原度）
    - `backgroundColor`: "transparent"
    - `embedFonts`: true

### 步骤8: 还原度对比与数据管理
**⭐ 前置条件**: expected.png已在步骤2中下载完成

**直接进行像素级对比分析**：
- **使用工具**: `mcp_figma_restoration_mcp_vue_tools_figma_compare`
- **基本参数**:
  - `componentName`: 组件名称
  - `threshold`: 0.02（98%还原度要求）
  - `generateReport`: true
- **⭐ 必须指定输出路径**:
  - **必须与步骤6使用相同的results目录**
- **⭐ 结果存储位置**:
  - expected.png, actual.png, diff.png 存储在组件的results目录

**🆕 还原度数据管理**:
- **数据存储位置**: 将还原度数据存储在`metadata.json`的`restorationData`字段中
- **数据格式**:
  ```json
  {
    "restorationData": {
      "matchPercentage": 91.13519028670544,
      "diffPixels": 43442,
      "totalPixels": 490050,
      "dimensions": {
        "width": 594,
        "height": 825
      },
      "timestamp": "2025-07-30T08:55:00.000Z",
      "status": "completed"
    }
  }
  ```
- **页面数据读取**: 所有页面组件从metadata.json的restorationData字段读取还原度数据
- **优势**: 数据集中管理，避免额外的comparison-data.json文件

### 步骤9: 自我反思优化
如果还原度 < 98%：
- **问题分析**:
  - 布局差异（位置、尺寸、对齐）
  - 样式差异（颜色、字体、效果）
  - 素材问题（缺失、错误、质量）
  - 素材节点问题: 检查是否正确识别了所有素材节点
  - 冗余元素问题: 检查是否包含了不必要的冗余元素
- **优化策略**:
  - **重新执行步骤3**: **基于expected.png重新优化layout-analysis结构**
  - 验证素材节点识别: 确认所有 `ic`、`ic_`、`素材` 等关键词节点已正确处理
  - 冗余元素清理: **重新基于expected.png进行视觉验证**
  - 结构合理性验证: **通过观察expected.png的视觉层级**
  - 边框处理优化: 根据Figma边框类型选择合适的Web属性
  - 调整CSS样式和布局（**优先使用flex布局优化**）
- **迭代流程**:
  - 最多迭代3次
  - 每次迭代都要重新截图和使用对比工具分析
  - 记录改进点和剩余问题
- **经验积累**:
  - **重要问题必须记录**: 当遇到新的技术难点、特殊的Figma结构、或创新的解决方案时
  - **存储位置**: `/src/restoration-tips/` 目录
  - **文件命名规范**: `{问题类型}-{核心关键词}.md`

### 步骤10: 经验知识库查找与优化
**⭐ 当还原度不足时，优先查找历史经验**：
- **经验查找路径**: `/src/restoration-tips/` 目录
- **查找策略**:
  - **按问题类型搜索**: 布局分析、截图对比、素材识别、文本渲染、边框盒模型等
  - **按关键词搜索**: 还原度、像素差异、尺寸设置、素材优化等
  - **按组件特征搜索**: 文件夹、按钮、图标、文本等具体元素类型
- **经验应用流程**:
  1. **问题匹配**: 将当前问题与历史经验进行匹配
  2. **方案验证**: 检查经验中的解决方案是否适用于当前场景
  3. **代码复用**: 直接应用经验中的代码示例和配置参数
  4. **效果验证**: 应用后重新截图对比，验证改进效果
- **常见优化经验**:
  - **3倍图缩放问题**: 参考"截图对比-3倍图缩放与样式尺寸设置.md"
  - **素材节点识别**: 参考"素材识别-容器节点vs具体素材元素判断策略.md"
  - **复杂元素优化**: 参考"复杂元素优化-转素材策略提升还原度.md"
  - **文本渲染差异**: 参考"文本渲染差异-pixelMatch阈值优化策略.md"
  - **边框盒模型**: 参考"边框盒模型差异-Figma与Web尺寸计算.md"
  - **布局分析问题**: 参考"布局分析-FolderItem大面积差异问题.md"
- **经验更新机制**:
  - **新问题记录**: 遇到新的技术难点时及时记录
  - **方案验证**: 验证历史经验在新场景下的有效性
  - **持续优化**: 基于实际效果不断改进和补充经验库

## 📁 文件结构与路径配置

### 🎯 标准目录结构
```
# 统一Figma数据目录
/src/figma-data/
├── figma-{fileKey}-{nodeId}-{timestamp}.json  # 按node-id命名的Figma原始数据

# 还原经验知识库
/src/restoration-tips/
├── 冗余元素识别-透明度为0的边界元素.md
├── flex布局优化-文件夹图标位置偏移问题.md
└── ...

# 组件目录结构
/src/components/{ComponentName}/
├── index.vue                     # Vue 组件
├── metadata.json                 # ⭐ 组件元数据（包含还原度数据）
├── layout-analysis.json          # 布局分析JSON
├── images/                       # ⭐ 素材文件目录
│   ├── folder-icon.svg           # 图标文件
│   └── background.png            # 背景图片等
└── results/                      # ⭐ 截图对比结果目录
    ├── expected.png              # Figma原图
    ├── actual.png                # 组件截图
    └── diff.png                  # 差异对比图
```

### 🎯 路径规则
- **Figma JSON savePath**: 统一数据目录的绝对路径 `/src/figma-data`
- **素材下载**: images目录的绝对路径
- **截图对比**: results目录的绝对路径  
- **经验文件**: restoration-tips目录的绝对路径
- **必须分类存储**: 素材文件在images目录，结果文件在results目录，经验文件在restoration-tips目录
- **必须保持一致**: 截图和对比工具使用相同的results文件夹

### 🆕 页面数据读取规范
- **还原度数据来源**: 所有页面组件从metadata.json的restorationData字段读取
- **数据读取优先级**:
  1. **metadata.json.restorationData** - 主要数据源 ✅
  2. **diff.png存在性检查** - 备用检测方式
  3. **默认值** - 无数据时的降级处理
- **页面组件更新**:
  - ComponentShowcase.vue: 从metadata.json读取还原度数据
  - DynamicComponent.vue: 从metadata.json读取还原度数据  
  - ComparisonViewer.vue: 从metadata.json读取还原度数据
- **数据格式统一**: 所有页面使用相同的restorationData字段结构

## 🚀 流程总结

### 🔄 执行顺序（10步骤）
1. **获取Figma数据** → 2. **下载expected.png** → 3. **视觉驱动分析layout-analysis** → 4. **下载素材** → 5. **递归还原子组件** → 6. **生成Vue组件** → 7. **组件截图** → 8. **还原度对比** → 9. **自我反思优化** → 10. **经验知识库查找与优化**

### ⭐ 核心优化点
- **视觉识别优先**: 先获取expected.png并进行视觉元素识别，再优化JSON结构
- **结构智能优化**: 基于视觉真实性自动识别和移除冗余元素，优化层级结构
- **可重复性**: 步骤9可以重复执行步骤3的结构优化过程
- **视觉驱动**: 以expected.png中的实际视觉元素为准，而非盲目使用所有JSON元素
- **分工明确**: Claude负责元素识别和结构优化，专门工具负责图片对比分析
- **统一数据管理**: Figma原始JSON统一存储在`/src/figma-data`，按node-id命名便于查找和复用
- **经验知识库**: 还原过程中的问题和解决方案统一存储在`/src/restoration-tips`，积累可复用的技术经验
- **还原度数据集中管理**: 将还原度数据存储在metadata.json的restorationData字段中，避免额外的comparison-data.json文件

- 及时更新进度和状态
- 遇到问题时主动寻求帮助


# 🔄 Figma组件还原流程规则

## 📋 工作目录范围
你始终在 figma-restoration-mcp-vue-tools目录下的文件工作

## 🎯 核心优势与定位

**⭐ 你是Claude AI，具备强大的图像元素识别能力**。在Figma组件还原流程中，**专注利用你的视觉识别能力**来：
- **直接识别expected.png中的视觉元素**: 无需依赖文件读取，直接观察和识别图片中的所有可见元素
- **智能过滤冗余元素**: 基于视觉验证，准确判断原始Figma JSON中的哪些元素在图片中真正可见、哪些是冗余的
- **确定真实元素层级**: 通过观察图片中的视觉层级关系，优化JSON中可能不合理的嵌套结构
- **视觉元素精确映射**: 将JSON中的技术描述与图片中的实际视觉效果进行准确对应

**重要说明**: 
- **图片对比工作由专门的对比工具完成**，Claude专注于元素识别和结构优化
- **原始Figma JSON只能保证视觉呈现正确**，但无法保证元素层级合理性和去除冗余元素
- **Claude的价值在于基于视觉真实性优化JSON结构**，确保最终实现更精确、更简洁

## 🔄 标准流程步骤

### 步骤1: 获取Figma数据
- **使用工具**: `mcp_figma-context_get_figma_data`
- 参数设置：
  - `fileKey`: 从Figma链接中提取
  - `nodeId`: 从Figma链接中提取
  - **⭐ savePath**: **必须使用绝对路径** `/Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools/src/figma-data`
- **文件命名规范**: 工具会自动保存JSON到指定目录，文件名包含node-id便于快速查找
  - 格式：`figma-{fileKey}-{nodeId}-{timestamp}.json`

### 步骤2: 下载预期截图获取视觉目标
**⭐ 首先获取视觉标准** - 在分析JSON之前先获取实际视觉效果：
- **使用工具**: `mcp_figma-context_download_figma_images`
- 参数设置：
  - `fileKey`: 与步骤1相同的fileKey
  - `nodeId`: 与步骤1相同的nodeId  
  - `localPath`: **必须使用绝对路径到results目录** `/Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools/src/components/{ComponentName}/results`
  - `fileName`: **必须命名为 "expected.png"**
  - `pngScale`: 3 （高分辨率）

**⭐ 重要：3倍图理解与尺寸设置**
- **图片缩放关系**: expected.png和actual.png都是3倍分辨率图片
- **CSS尺寸计算**: 实际CSS尺寸 = 图片显示尺寸 ÷ 3
- **尺寸来源优先级**:
  1. **layout-analysis.json** (1倍设计尺寸) - 主要依据 ✅
  2. **Figma JSON boundingBox** (1倍设计尺寸) - 验证依据
  3. **图片观察** (视觉识别) - 辅助判断，不用于数值设置

### 步骤3: 视觉驱动分析layout-analysis
**⭐ 视觉驱动的智能分析** - 结合视觉目标和技术数据进行分析：

**第一步：视觉元素识别**
- **直接查看expected.png**: 利用Claude的图像识别能力，直接分析图片中的所有可见元素
- **精确元素识别**: 识别图片中实际存在的文本、图标、按钮、背景、颜色、阴影等具体视觉元素
- **布局关系分析**: 观察元素间的相对位置、对齐方式、间距关系和层级结构
- **样式效果记录**: 记录实际的颜色值、字体样式、边框效果、阴影参数等视觉属性

**第二步：JSON数据映射**
- 从`/src/figma-data`目录读取原始figma JSON数据（按node-id快速定位最新的文件）
- 分析原始figma.json数据，确认以下关键信息：
  1. **页面结构**: 
     - 组件层级关系
     - 布局方式（**优先使用flex布局，非必要不使用绝对定位**）
     - 尺寸和位置信息
  2. **智能素材节点识别**:
     - **根据节点名字识别**: 检测名字中含有 `ic`、`ic_`、`素材`、`material`、`asset`、`icon`、`img`、`image` 等关键词
     - **自动跳过子节点**: 当识别为素材节点时，直接导出该节点，不再分析其子节点
     - **图片节点**: imageRef填充的节点
     - **图标节点**: SVG矢量图标
     - **背景图片**: 背景填充图片
     - **优先级**: 名字识别 > 类型+填充识别
  3. **子组件识别**: 嵌套的组件实例，可复用的UI元素
  4. **样式信息**: 颜色、字体、边框、阴影、圆角等效果

**第三步：冗余元素过滤与结构优化**
- **基于视觉真实性的结构优化**:
  - **视觉元素清单**: 利用Claude的图像识别能力，列出expected.png中所有真正可见的视觉元素
  - **JSON元素映射**: 将原始Figma JSON中的每个技术元素与视觉清单进行映射验证
  - **冗余元素智能识别**：
    - **不可见元素过滤**: 识别JSON中opacity为0、尺寸为0、或在视觉上完全不可见的元素
    - **重复元素合并**: 发现JSON中描述相同视觉效果的多个技术元素
    - **辅助性元素清理**: 移除在expected.png中无视觉体现的技术性辅助元素
  - **视觉层级结构分析**: 观察图片中元素的实际层级关系
  - **节点结构合理化**: 基于视觉层级优化JSON的嵌套结构

**第四步：布局结构优化**
- 将Figma的绝对定位转换为现代flex布局
- 分析元素间的相对位置关系
- 确定合理的padding和gap值
- 不使用margin

**输出：生成layout-analysis.json**
- 包含经过**视觉验证**的元素列表（已移除冗余元素）
- 明确的CSS布局策略（flex优先）
- 精确的尺寸和间距规范
- 符合Web标准的实现方案

### 步骤4: 下载素材
- **素材识别策略**:
  - **视觉驱动判断**: 基于Claude分析expected.png，确定真正需要的视觉素材
  - **节点名字判断规则**:
    - **语义化名称** (`"单选"`、`"按钮"`、`"图标组"`) → 通常是容器，需检查子元素
    - **具体形状名称** (`"Rectangle 3464324"`、`"Vector 297"`) → 真正的素材，优先下载
  - **节点类型优先级**:
    - **RECTANGLE/VECTOR/PATH** → 具体绘制元素，优先下载
    - **INSTANCE/COMPONENT** → 容器组件，需检查内部具体元素
    - **GROUP/FRAME** → 布局容器，通常不是素材本身
  - **尺寸精确匹配原则**:
    - **SVG原始尺寸 = CSS设置尺寸**，避免任何缩放变换
    - 确保viewBox与实际使用尺寸一致

### 步骤5: 递归还原子组件
对于识别出的子组件：
- 每个子组件重新执行步骤1-8的完整流程
- 创建独立的组件目录结构
- 确保组件间的依赖关系正确
- 优先还原基础组件，再还原复合组件

### 步骤6: 生成Vue组件代码
基于优化的JSON、准备的素材和制作的子组件生成代码：
- **技术栈要求**:
  - Vue 3 Composition API
  - TypeScript支持
  - **优先使用flex布局，避免绝对定位**
- **边框处理策略**:
  - **分析Figma边框类型**: 检查是内边框、外边框还是中边框
  - **选择合适的Web属性**:
    - 装饰性边框 → 使用 `outline` 或 `box-shadow`
    - 影响布局的边框 → 使用 `border` 并调整总尺寸
    - 复杂边框效果 → 使用 `box-shadow` 模拟多层边框
- **文件生成**:
  - `index.vue`: 主组件文件
  - `metadata.json`: 组件元数据（尺寸、描述等）

### 步骤7: 组件截图
使用工具进行高质量组件截图：
- **使用工具**: `mcp_figma_restoration_mcp_vue_tools_snapdom_screenshot`
- **基本参数**:
  - `componentName`: 组件名称
  - `projectPath`: 项目根路径
  - `port`: **⭐ 用户会启动服务在1932端口** (默认使用1932)
- **⭐ 必须指定输出路径**:
  - **outputPath**: **必须使用绝对路径到组件的results目录下的actual.png**
- **截图配置**:
  - `snapDOMOptions`: 高质量截图配置
    - `scale`: 3（高分辨率）
    - **padding设置规则**: **无阴影组件**: `padding: 0` （精确裁切，提升还原度）
    - `backgroundColor`: "transparent"
    - `embedFonts`: true

### 步骤8: 还原度对比与数据管理
**⭐ 前置条件**: expected.png已在步骤2中下载完成

**直接进行像素级对比分析**：
- **使用工具**: `mcp_figma_restoration_mcp_vue_tools_figma_compare`
- **基本参数**:
  - `componentName`: 组件名称
  - `threshold`: 0.02（98%还原度要求）
  - `generateReport`: true
- **⭐ 必须指定输出路径**:
  - **必须与步骤6使用相同的results目录**
- **⭐ 结果存储位置**:
  - expected.png, actual.png, diff.png 存储在组件的results目录

**🆕 还原度数据管理**:
- **数据存储位置**: 将还原度数据存储在`metadata.json`的`restorationData`字段中
- **数据格式**:
  ```json
  {
    "restorationData": {
      "matchPercentage": 91.13519028670544,
      "diffPixels": 43442,
      "totalPixels": 490050,
      "dimensions": {
        "width": 594,
        "height": 825
      },
      "timestamp": "2025-07-30T08:55:00.000Z",
      "status": "completed"
    }
  }
  ```
- **页面数据读取**: 所有页面组件从metadata.json的restorationData字段读取还原度数据
- **优势**: 数据集中管理，避免额外的comparison-data.json文件

### 步骤9: 自我反思优化
如果还原度 < 98%：
- **问题分析**:
  - 布局差异（位置、尺寸、对齐）
  - 样式差异（颜色、字体、效果）
  - 素材问题（缺失、错误、质量）
  - 素材节点问题: 检查是否正确识别了所有素材节点
  - 冗余元素问题: 检查是否包含了不必要的冗余元素
- **优化策略**:
  - **重新执行步骤3**: **基于expected.png重新优化layout-analysis结构**
  - 验证素材节点识别: 确认所有 `ic`、`ic_`、`素材` 等关键词节点已正确处理
  - 冗余元素清理: **重新基于expected.png进行视觉验证**
  - 结构合理性验证: **通过观察expected.png的视觉层级**
  - 边框处理优化: 根据Figma边框类型选择合适的Web属性
  - 调整CSS样式和布局（**优先使用flex布局优化**）
- **迭代流程**:
  - 最多迭代3次
  - 每次迭代都要重新截图和使用对比工具分析
  - 记录改进点和剩余问题
- **经验积累**:
  - **重要问题必须记录**: 当遇到新的技术难点、特殊的Figma结构、或创新的解决方案时
  - **存储位置**: `/src/restoration-tips/` 目录
  - **文件命名规范**: `{问题类型}-{核心关键词}.md`

### 步骤10: 经验知识库查找与优化
**⭐ 当还原度不足时，优先查找历史经验**：
- **经验查找路径**: `/src/restoration-tips/` 目录
- **查找策略**:
  - **按问题类型搜索**: 布局分析、截图对比、素材识别、文本渲染、边框盒模型等
  - **按关键词搜索**: 还原度、像素差异、尺寸设置、素材优化等
  - **按组件特征搜索**: 文件夹、按钮、图标、文本等具体元素类型
- **经验应用流程**:
  1. **问题匹配**: 将当前问题与历史经验进行匹配
  2. **方案验证**: 检查经验中的解决方案是否适用于当前场景
  3. **代码复用**: 直接应用经验中的代码示例和配置参数
  4. **效果验证**: 应用后重新截图对比，验证改进效果
- **常见优化经验**:
  - **3倍图缩放问题**: 参考"截图对比-3倍图缩放与样式尺寸设置.md"
  - **素材节点识别**: 参考"素材识别-容器节点vs具体素材元素判断策略.md"
  - **复杂元素优化**: 参考"复杂元素优化-转素材策略提升还原度.md"
  - **文本渲染差异**: 参考"文本渲染差异-pixelMatch阈值优化策略.md"
  - **边框盒模型**: 参考"边框盒模型差异-Figma与Web尺寸计算.md"
  - **布局分析问题**: 参考"布局分析-FolderItem大面积差异问题.md"
- **经验更新机制**:
  - **新问题记录**: 遇到新的技术难点时及时记录
  - **方案验证**: 验证历史经验在新场景下的有效性
  - **持续优化**: 基于实际效果不断改进和补充经验库

## 📁 文件结构与路径配置

### 🎯 标准目录结构
```
# 统一Figma数据目录
/src/figma-data/
├── figma-{fileKey}-{nodeId}-{timestamp}.json  # 按node-id命名的Figma原始数据

# 还原经验知识库
/src/restoration-tips/
├── 冗余元素识别-透明度为0的边界元素.md
├── flex布局优化-文件夹图标位置偏移问题.md
└── ...

# 组件目录结构
/src/components/{ComponentName}/
├── index.vue                     # Vue 组件
├── metadata.json                 # ⭐ 组件元数据（包含还原度数据）
├── layout-analysis.json          # 布局分析JSON
├── images/                       # ⭐ 素材文件目录
│   ├── folder-icon.svg           # 图标文件
│   └── background.png            # 背景图片等
└── results/                      # ⭐ 截图对比结果目录
    ├── expected.png              # Figma原图
    ├── actual.png                # 组件截图
    └── diff.png                  # 差异对比图
```

### 🎯 路径规则
- **Figma JSON savePath**: 统一数据目录的绝对路径 `/src/figma-data`
- **素材下载**: images目录的绝对路径
- **截图对比**: results目录的绝对路径  
- **经验文件**: restoration-tips目录的绝对路径
- **必须分类存储**: 素材文件在images目录，结果文件在results目录，经验文件在restoration-tips目录
- **必须保持一致**: 截图和对比工具使用相同的results文件夹

### 🆕 页面数据读取规范
- **还原度数据来源**: 所有页面组件从metadata.json的restorationData字段读取
- **数据读取优先级**:
  1. **metadata.json.restorationData** - 主要数据源 ✅
  2. **diff.png存在性检查** - 备用检测方式
  3. **默认值** - 无数据时的降级处理
- **页面组件更新**:
  - ComponentShowcase.vue: 从metadata.json读取还原度数据
  - DynamicComponent.vue: 从metadata.json读取还原度数据  
  - ComparisonViewer.vue: 从metadata.json读取还原度数据
- **数据格式统一**: 所有页面使用相同的restorationData字段结构

## 🚀 流程总结

### 🔄 执行顺序（10步骤）
1. **获取Figma数据** → 2. **下载expected.png** → 3. **视觉驱动分析layout-analysis** → 4. **下载素材** → 5. **递归还原子组件** → 6. **生成Vue组件** → 7. **组件截图** → 8. **还原度对比** → 9. **自我反思优化** → 10. **经验知识库查找与优化**

### ⭐ 核心优化点
- **视觉识别优先**: 先获取expected.png并进行视觉元素识别，再优化JSON结构
- **结构智能优化**: 基于视觉真实性自动识别和移除冗余元素，优化层级结构
- **可重复性**: 步骤9可以重复执行步骤3的结构优化过程
- **视觉驱动**: 以expected.png中的实际视觉元素为准，而非盲目使用所有JSON元素
- **分工明确**: Claude负责元素识别和结构优化，专门工具负责图片对比分析
- **统一数据管理**: Figma原始JSON统一存储在`/src/figma-data`，按node-id命名便于查找和复用
- **经验知识库**: 还原过程中的问题和解决方案统一存储在`/src/restoration-tips`，积累可复用的技术经验
- **还原度数据集中管理**: 将还原度数据存储在metadata.json的restorationData字段中，避免额外的comparison-data.json文件

- 及时更新进度和状态
- 遇到问题时主动寻求帮助
