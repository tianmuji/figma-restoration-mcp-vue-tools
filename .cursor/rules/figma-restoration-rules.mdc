
# 工作目录范围
你始终在 figma-restoraion-mcp-vue-tools目录下的文件工作

# Figma组件还原流程规则

## 概述
当用户要求还原Figma组件并提供Figma链接时，严格按照以下8+步流程执行（包含新增的步骤5.5）。

## 流程步骤

### 步骤1: 获取Figma数据
- 使用工具获取Figma JSON数据
- 参数设置：
  - `fileKey`: 从Figma链接中提取
  - `nodeId`: 从Figma链接中提取
  - `savePath`: 使用绝对路径 `/Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools/src/components/{ComponentName}`
- 工具会自动保存JSON到指定目录

### 步骤2: 分析JSON内容
分析返回的JSON数据，确认以下关键信息：
1. **页面结构**: 
   - 组件层级关系
   - 布局方式（**优先使用flex布局，非必要不使用绝对定位**）
   - 尺寸和位置信息
2. **🆕 智能素材节点识别**:
   - **根据节点名字识别**: 检测名字中含有 `ic`、`ic_`、`素材`、`material`、`asset`、`icon`、`img`、`image` 等关键词
   - **自动跳过子节点**: 当识别为素材节点时，直接导出该节点，不再分析其子节点
   - **图片节点**: imageRef填充的节点
   - **图标节点**: SVG矢量图标
   - **背景图片**: 背景填充图片
   - **优先级**: 名字识别 > 类型+填充识别
3. **子组件识别**:
   - 嵌套的组件实例
   - 可复用的UI元素
4. **样式信息**:
   - 颜色、字体、边框
   - 阴影、圆角等效果
   - 响应式布局需求

输出：生成符合Web标准、层级分明的优化JSON结构

### 步骤3: 手动准备素材资源
由于项目已简化，需要手动准备素材：
- **🆕 统一目录结构** - 所有文件存储在组件目录中：
```
/Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools/src/components/{ComponentName}/
├── index.vue                     # Vue 组件
├── metadata.json                 # 组件元数据
├── images/                       # 素材图片目录
│   ├── icon_scan.svg            # 图标文件
│   ├── image_bg.png             # 背景图片
│   └── logo_main.svg            # Logo文件
└── results/                      # ⭐ 截图对比结果目录
    ├── actual.png                # 组件截图
    ├── expected.png              # Figma原图
    ├── diff.png                  # 差异对比图
    ├── figma-analysis-report.json # 分析报告
    └── region-analysis.json      # 区域分析
```
- **素材准备方式**:
  - 从Figma手动导出图片素材到images目录
  - 确保素材命名符合规范（icon_xxx.svg, image_xxx.png等）
  - 推荐使用高分辨率素材（2x或3x）

### 步骤4: 递归还原子组件
对于识别出的子组件：
- 每个子组件重新执行步骤1-8的完整流程
- 创建独立的组件目录结构
- 确保组件间的依赖关系正确
- 优先还原基础组件，再还原复合组件

### 步骤5: 生成Vue组件代码
基于优化的JSON、准备的素材和制作的子组件生成代码：
- **技术栈要求**:
  - Vue 3 Composition API
  - TypeScript支持
  - **优先使用flex布局，避免绝对定位**
- **代码结构**:
  - 响应式设计
  - 语义化HTML结构
  - 可访问性支持
  - 性能优化（懒加载、图片优化等）
- **文件生成**:
  - `index.vue`: 主组件文件
  - `metadata.json`: 组件元数据（尺寸、描述等）
- **⭐ 组件自动注册**: Vue组件在项目中通过 `src/components/index.ts` 自动注册，无需检查注册相关代码

### 步骤5.5: 启动开发服务器
**⭐ 新增步骤** - 手动启动Vue开发服务器确保截图工具能正常工作：
- **启动命令**: 在项目根目录执行 `yarn dev` 或 `npm run dev`
- **确认端口**: 查看命令行输出，记录实际的端口号（如：`http://localhost:83/`）
- **验证服务器**: 确保服务器成功启动并且组件页面可访问
- **后台运行**: 使用 `&` 符号让服务器在后台运行
```bash
# 正确示例
cd /Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools
yarn dev &

# 输出示例：
# ➜  Local:   http://localhost:83/
# 记录端口: 83
```

### 步骤6: 组件截图
使用工具进行高质量组件截图：
- **基本参数**:
  - `componentName`: 组件名称
  - `projectPath`: 项目根路径
  - `port`: **⭐ 必须使用步骤5.5中yarn dev返回的实际端口号**
- **⭐ 必须指定输出路径**:
  - **outputPath**: 必须使用绝对路径到组件的results目录下的actual.png
  - **路径格式**: `/Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools/src/components/{ComponentName}/results/actual.png`
- **截图配置**:
  - `snapDOMOptions`: 高质量截图配置
    - `scale`: 3（高分辨率）
    - `padding`: 根据阴影效果调整, 一般都填0
    - `backgroundColor`: "transparent"
    - `embedFonts`: true

### 步骤7: 还原度对比
使用工具进行像素级对比分析：
- **基本参数**:
  - `componentName`: 组件名称
  - `threshold`: 0.02（98%还原度要求）
  - `generateReport`: true
- **⭐ 必须指定输出路径**:
  - **必须与步骤6使用相同的输出路径目录**
  - **路径格式**: `/Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools/src/components/{ComponentName}/results`
- **⭐ 结果存储位置**:
  - expected.png, actual.png, diff.png 存储在组件的results目录
  - 分析报告存储在同一目录下
- 分析对比结果，识别差异点

### 步骤8: 自我反思优化
如果还原度 < 98%：
- **问题分析**:
  - 布局差异（位置、尺寸、对齐）
  - 样式差异（颜色、字体、效果）
  - 素材问题（缺失、错误、质量）
  - **🆕 素材节点问题**: 检查是否正确识别了所有素材节点
- **优化策略**:
  - 重新分析JSON结构（回到步骤2）
  - **🆕 验证素材节点识别**: 确认所有 `ic`、`ic_`、`素材` 等关键词节点已正确处理
  - 调整CSS样式和布局（**优先使用flex布局优化**）
  - 重新准备或优化素材
  - 修复子组件问题
- **迭代流程**:
  - 最多迭代3次
  - 每次迭代都要重新截图对比
  - 记录改进点和剩余问题

## 🆕 路径配置最佳实践

### ⭐ 统一路径配置（推荐）
- **截图工具**: 指定具体文件路径到actual.png
- **对比工具**: 指定目录路径到results文件夹
- **路径格式**: `/Users/yujie_wu/Documents/study/11111/figma-restoration-mcp-vue-tools/src/components/{ComponentName}/results`

**存储位置**: `src/components/{ComponentName}/results/`

### 🎯 路径规则
- **截图工具**: 指定具体文件路径 (actual.png)
- **对比工具**: 指定目录路径 (results文件夹)
- **必须保持一致**: 两个工具使用相同的组件目录下的results文件夹

## 质量标准

### 代码质量
- 遵循Vue 3最佳实践
- TypeScript支持
- **优先使用flex布局，避免绝对定位**
- 响应式设计支持
- 无障碍访问性
- 性能优化

### 视觉还原度
- 像素级精确度 ≥ 98%
- 颜色匹配准确
- 字体和排版一致
- 交互状态完整
- 动画效果（如有）

### 项目结构
- 清晰的目录组织
- 合理的文件命名
- 完整的资源管理
- 良好的组件复用

## 错误处理

### 常见问题及解决方案
1. **Figma数据获取失败**: 检查链接格式和权限
2. **素材准备失败**: 验证素材路径和文件格式
3. **🆕 素材节点识别错误**: 检查节点名字是否包含关键词，手动调整识别逻辑
4. **组件渲染错误**: 检查依赖和语法
5. **⭐ 服务器启动失败**: 确认yarn dev命令正确执行，检查端口占用情况
6. **⭐ 端口错误**: 必须使用yarn dev输出的实际端口，不要使用默认端口
7. **截图失败**: 确认开发服务器状态和端口号一致
8. **对比失败**: 检查文件路径和权限
9. **🆕 路径不一致**: 确保截图和对比工具使用相同的outputPath

### 调试建议
- 逐步验证每个工具的输出
- 保存中间结果用于问题排查
- 记录详细的错误信息和上下文
- **⭐ 验证服务器启动**: 执行yarn dev后必须看到明确的端口信息
- **⭐ 记录实际端口**: 将yarn dev输出的端口号准确传递给截图工具
- **🆕 检查素材节点日志**: 查看控制台输出的素材识别信息
- **🆕 验证路径一致性**: 确认两个工具使用相同的存储路径
- 必要时请求用户协助

## 注意事项
- 严格按照步骤顺序执行
- 每个步骤完成后验证结果
- **⭐ 必须手动启动服务器**: 步骤5.5中必须手动执行yarn dev并记录端口号
- **⭐ 必须使用绝对路径**: 截图和对比工具都必须指定组件results目录的绝对路径
- **⭐ 优先flex布局**: 非必要不使用绝对定位，优先使用现代flex布局
- **⭐ 组件自动注册**: 无需检查组件注册相关代码，项目已自动处理
- **⭐ 端口一致性**: 截图工具必须使用yarn dev返回的实际端口号
- **🆕 关注素材识别日志**: 及时发现素材节点识别问题
- 保持代码和文件的一致性
- 及时更新进度和状态
- 遇到问题时主动寻求帮助

- 及时更新进度和状态
- 遇到问题时主动寻求帮助
